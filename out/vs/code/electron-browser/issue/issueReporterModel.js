/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
define(["require", "exports", "vs/base/common/objects", "vs/platform/issue/common/issue"], function (require, exports, objects_1, issue_1) {
    'use strict';
    Object.defineProperty(exports, "__esModule", { value: true });
    var IssueReporterModel = /** @class */ (function () {
        function IssueReporterModel(initialData) {
            var defaultData = {
                includeSystemInfo: true,
                includeWorkspaceInfo: true,
                includeProcessInfo: true,
                includeExtensions: true,
                includeSearchedExtensions: true,
                includeSettingsSearchDetails: true,
                reprosWithoutExtensions: false
            };
            this._data = initialData ? objects_1.assign(defaultData, initialData) : defaultData;
        }
        IssueReporterModel.prototype.getData = function () {
            return this._data;
        };
        IssueReporterModel.prototype.update = function (newData) {
            objects_1.assign(this._data, newData);
        };
        IssueReporterModel.prototype.serialize = function () {
            return "\n### Issue Type\n" + this.getIssueTypeTitle() + "\n\n### Description\n\n" + this._data.issueDescription + "\n\n### VS Code Info\n\nVS Code version: " + (this._data.versionInfo && this._data.versionInfo.vscodeVersion) + "\nOS version: " + (this._data.versionInfo && this._data.versionInfo.os) + "\n\n" + this.getInfos() + "\n<!-- generated by issue reporter -->";
        };
        IssueReporterModel.prototype.getIssueTypeTitle = function () {
            if (this._data.issueType === issue_1.IssueType.Bug) {
                return 'Bug';
            }
            else if (this._data.issueType === issue_1.IssueType.PerformanceIssue) {
                return 'Performance Issue';
            }
            else if (this._data.issueType === issue_1.IssueType.SettingsSearchIssue) {
                return 'Settings Search Issue';
            }
            else {
                return 'Feature Request';
            }
        };
        IssueReporterModel.prototype.getInfos = function () {
            var info = '';
            if (this._data.issueType === issue_1.IssueType.Bug || this._data.issueType === issue_1.IssueType.PerformanceIssue) {
                if (this._data.includeSystemInfo) {
                    info += this.generateSystemInfoMd();
                }
            }
            if (this._data.issueType === issue_1.IssueType.PerformanceIssue) {
                if (this._data.includeProcessInfo) {
                    info += this.generateProcessInfoMd();
                }
                if (this._data.includeWorkspaceInfo) {
                    info += this.generateWorkspaceInfoMd();
                }
            }
            if (this._data.issueType === issue_1.IssueType.Bug || this._data.issueType === issue_1.IssueType.PerformanceIssue) {
                if (this._data.includeExtensions) {
                    info += this.generateExtensionsMd();
                }
                info += this._data.reprosWithoutExtensions ? '\nReproduces without extensions' : '\nReproduces only with extensions';
            }
            if (this._data.issueType === issue_1.IssueType.SettingsSearchIssue) {
                if (this._data.includeSearchedExtensions) {
                    info += this.generateExtensionsMd();
                }
                if (this._data.includeSettingsSearchDetails) {
                    info += this.generateSettingSearchResultsMd();
                    info += '\n' + this.generateSettingsSearchResultDetailsMd();
                }
            }
            return info;
        };
        IssueReporterModel.prototype.generateSystemInfoMd = function () {
            var _this = this;
            var md = "<details>\n<summary>System Info</summary>\n\n|Item|Value|\n|---|---|\n";
            Object.keys(this._data.systemInfo).forEach(function (k) {
                md += "|" + k + "|" + _this._data.systemInfo[k] + "|\n";
            });
            md += '\n</details>';
            return md;
        };
        IssueReporterModel.prototype.generateProcessInfoMd = function () {
            var md = "<details>\n<summary>Process Info</summary>\n\n|pid|CPU|Memory (MB)|Name|\n|---|---|---|---|\n";
            this._data.processInfo.forEach(function (p) {
                md += "|" + p.pid + "|" + p.cpu + "|" + p.memory + "|" + p.name + "|\n";
            });
            md += '\n</details>';
            return md;
        };
        IssueReporterModel.prototype.generateWorkspaceInfoMd = function () {
            return "<details>\n<summary>Workspace Info</summary>\n\n```\n" + this._data.workspaceInfo + ";\n```\n\n</details>\n";
        };
        IssueReporterModel.prototype.generateExtensionsMd = function () {
            if (this._data.extensionsDisabled) {
                return 'Extensions disabled';
            }
            var themeExclusionStr = this._data.numberOfThemeExtesions ? "\n(" + this._data.numberOfThemeExtesions + " theme extensions excluded)" : '';
            if (!this._data.enabledNonThemeExtesions) {
                return 'Extensions: none' + themeExclusionStr;
            }
            var tableHeader = "Extension|Author (truncated)|Version\n---|---|---";
            var table = this._data.enabledNonThemeExtesions.map(function (e) {
                return e.manifest.name + "|" + e.manifest.publisher.substr(0, 3) + "|" + e.manifest.version;
            }).join('\n');
            return "<details><summary>Extensions (" + this._data.enabledNonThemeExtesions.length + ")</summary>\n\n" + tableHeader + "\n" + table + "\n" + themeExclusionStr + "\n\n</details>";
        };
        IssueReporterModel.prototype.generateSettingsSearchResultDetailsMd = function () {
            return "\nQuery: " + this._data.query + "\nLiteral matches: " + this._data.filterResultCount;
        };
        IssueReporterModel.prototype.generateSettingSearchResultsMd = function () {
            if (!this._data.actualSearchResults) {
                return '';
            }
            if (!this._data.actualSearchResults.length) {
                return "No fuzzy results";
            }
            var tableHeader = "Setting|Extension|Score\n---|---|---";
            var table = this._data.actualSearchResults.map(function (setting) {
                return setting.key + "|" + setting.extensionId + "|" + String(setting.score).slice(0, 5);
            }).join('\n');
            return "<details><summary>Results</summary>\n\n" + tableHeader + "\n" + table + "\n\n</details>";
        };
        return IssueReporterModel;
    }());
    exports.IssueReporterModel = IssueReporterModel;
});
